@RenderPage("~/AreaRestrita/Seguranca.cshtml");
@{
    Page.Title = "Classificacao";
    Layout = "~/AreaRestrita/_Layout.cshtml";
}

@functions {
    private class Time
    {
        public string IdTime { get; set; }
        public string Nome { get; set; }
    }

    private class Compativel
    {
        public string IdTime1 { get; set; }
        public string IdTime2 { get; set; }
        public bool Alteravel { get; set; }
    }

    private void AlimentaVariaveis()
    {
        acao = Util.ChecaNulo(Request.Form["acao"]);
        strCompativeis = Util.ChecaNulo(Request.Form["timesCompativel"]);


    }

    string acao = null;
    string strCompativeis = null;


    List<Time> times = null;
    List<Compativel> compativeis = null;

    private void Manutencao()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@Compativeis", strCompativeis);


        new Dao().ExecutarAcao(acao, parametros);

    }

    private void executarManutencao()
    {
        Manutencao();
        ModelState.AddError("alert-success", "Operação realizada com sucesso.");
    }

    private void ConsultarTimes()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();

        times = new Dao().ExecutarAcaoList<Time>("C", parametros);

    }

    private void ConsultarCompativeis()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();

        parametros.Add("@TipoRetorno", 1);

        compativeis = new Dao().ExecutarAcaoList<Compativel>("C", parametros);
    }

    private bool ehCompativel(string idTime1, string idTime2)
    {
        bool compativel = false;

        foreach (Compativel cp in compativeis)
        {
            if ((cp.IdTime1 == idTime1 && cp.IdTime2 == idTime2) || (cp.IdTime1 == idTime2 && cp.IdTime2 == idTime1))
            {
                compativel = true;
                break;
            }
        }

        return compativel;
    }

    private bool ehAlteravel(string idTime1, string idTime2)
    {
        bool alteravel = true;

        foreach (Compativel cp in compativeis)
        {
            if ((cp.IdTime1 == idTime1 && cp.IdTime2 == idTime2) || (cp.IdTime1 == idTime2 && cp.IdTime2 == idTime1))
            {
                alteravel = cp.Alteravel;
                break;
            }
        }

        return alteravel;
    }
}

@{
    AlimentaVariaveis();


    if (acao == "A")
    {
        Util.ExceptionHandler(executarManutencao, this.ModelState);

    }

    Util.ExceptionHandler(() =>
    {
        ConsultarTimes();
        ConsultarCompativeis();
    }, this.ModelState);
}


<form name="form1" method="post">
    <input type="hidden" name="acao" id="acao" />


    <div class="container">
        <h1>Confrontos times</h1>

        <div class="mb-3">
            <button class="btn btn-outline-secondary" type="submit" onclick="estadoInicial()">Limpar</button>
            <button class="btn btn-primary" type="button" onclick="executarAcao('A')">Gravar</button>

        </div>

        @PageHelper.MakeAlert()

        @if (times != null)
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th width="50">Times</th>
                        @foreach (Time item in times)
                        {
                            <th width="50">@item.Nome</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (Time time1 in times)
                    {
                        <tr>
                            <td>@time1.Nome</td>
                            @foreach (Time time2 in times)
                            {
                                if (time1.IdTime == time2.IdTime)
                                {
                                    <td style="background-color: #d3d3d3"></td>
                                }
                                else
                                {
                                    if (ehAlteravel(time1.IdTime, time2.IdTime))
                                    {
                                        <td id="@("TD" + time1.IdTime + "_" + time2.IdTime)" class="confronto @(ehCompativel(time1.IdTime, time2.IdTime) ? "compativel" : "incompativel")" onclick="ChecaSelecao('@time1.IdTime', '@time2.IdTime')">

                                            <input class="form-check-input d-none" type="checkbox" name="timesCompativel" id="@("C" + time1.IdTime + "_" + time2.IdTime)" value="@(time1.IdTime + "_" + time2.IdTime)" @(ehCompativel(time1.IdTime, time2.IdTime) ? "checked" : "") />
                                        </td>
                                    }
                                    else
                                    {
                                        <td class="nao-alteravel" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Não é possível alterar esse confronto pois ele possui participações cadastradas."></td>
                                    }
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</form>




<style>
    .nao-alteravel {
        cursor: help;
        background-color: var(--bs-warning) !important;
    }

    .compativel {
        cursor: pointer;
        background-color: var(--bs-success) !important;
    }

    .compativel:hover {
        background-color: var(--bs-danger) !important;
        opacity: 0.4;
    }

    .incompativel {
        cursor: pointer;
        background-color: var(--bs-danger) !important;
    }

    .incompativel:hover {
        background-color: var(--bs-success) !important;
        opacity: 0.4;
    }
</style>

<script src="~/Scripts/scripts.js"></script>

@*jquery*@
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script>
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
    const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))

    function consultar() {
        document.form1.acao.value = "C";
        document.form1.submit();
    }

    function ChecaSelecao(ii, jj) {
        $tdConfronto1 = $(`td#TD${ii}_${jj}`);
        $tdConfronto2 = $(`td#TD${jj}_${ii}`);
        $confrontoCheckbox1 = $(`input#C${ii}_${jj}`);
        $confrontoCheckbox2 = $(`input#C${jj}_${ii}`);

        const currentStatus = !!$confrontoCheckbox1.attr("checked");
        const newStatus = !currentStatus;

        console.log({ currentStatus, newStatus });


        $confrontoCheckbox1.attr('checked', newStatus);
        $confrontoCheckbox2.attr('checked', newStatus);

        if (newStatus) {
            $tdConfronto1.removeClass("incompativel").addClass("compativel");
            $tdConfronto2.removeClass("incompativel").addClass("compativel");
        } else {
            $tdConfronto1.removeClass("compativel").addClass("incompativel");
            $tdConfronto2.removeClass("compativel").addClass("incompativel");
        }
    }

    function estadoInicial() {
        var elements = document.querySelectorAll('input, select');

        if (elements) {
            elements.forEach(function (item) {
                var type = item.type;
                var tag = item.tagName.toLowerCase();


                if (type == 'text' || type == 'hidden' || type == 'password' || tag == 'textarea') {
                    item.value = '';
                } else if (type == 'checkbox' || type == 'radio') {
                    item.checked = false;
                } else if (tag == 'select') {
                    item.selectedIndex = -1;

                }
            })
        }
    }
</script>



