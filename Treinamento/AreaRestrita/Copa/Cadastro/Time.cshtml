@RenderPage("~/AreaRestrita/Seguranca.cshtml");

@{
    Page.Title = "Time";
    Layout = "~/AreaRestrita/_Layout.cshtml";
}

@functions {
    private enum View
    {
        Index,
        New,
        Edit
    }

    private class Time
    {
        public string IdTime { get; set; }
        public string Nome { get; set; }
    }

    View view = View.Index;
    string acao = null;
    string idTime = null;
    List<Time> times = null;
    List<Botao> botoes = null;
    Time time = null;



    private void AlimentaVariaveis()
    {

        instanciarTime();

        acao = Util.ChecaNulo(Request.Form["acao"]);
        idTime = Util.ChecaNulo(Request.Form["idTime"]);
        botoes = new BotaoDao().GetAll();


        if (!string.IsNullOrWhiteSpace(Request.Form["view"]))
        {
            view = (View)Enum.Parse(typeof(View), Request.Form["view"]);
        }
    }

    private void LimpaVariaveis()
    {
        acao = null;
        idTime = null;
        time = null;
    }

    private void Consultar()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@IdTime", idTime);

        times = new Dao().ExecutarAcaoList<Time>("C", parametros);

    }

    private string isInvalid(string key)
    {
        return (!ModelState.IsValidField(key) ? "is-invalid" : "");
    }

    private void Manutencao()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@IdTime", time.IdTime);
        parametros.Add("@Nome", time.Nome);


        new Dao().ExecutarAcao(acao, parametros);

    }

    private void instanciarTime()
    {
        if (time == null)
        {
            time = new Time();
        }
    }

    private void carregarDados()
    {
        if (view == View.Edit && acao == "C" && times != null && times.Count == 1)
        {
            time = times.FirstOrDefault();

        }
    }

    private void executarManutencao()
    {
        time = new Time()
        {
            IdTime = Util.ChecaNulo(Request.Form["idTime"]),
            Nome = Util.ChecaNulo(Request.Form["nome"])
        };

        Manutencao();
        view = View.Index;
        LimpaVariaveis();
        ModelState.AddError("alert-success", "Operação realizada com sucesso.");
    }
}

@{
    AlimentaVariaveis();

    if (acao == "I" || acao == "A" || acao == "E")
    {
        Util.ExceptionHandler(executarManutencao, this.ModelState);

    }

    Util.ExceptionHandler(() =>
    {
        Consultar();
        carregarDados();

    }, this.ModelState);
}

<form name="form1" method="post">
    <input type="hidden" name="acao" id="acao" />
    <input type="hidden" name="idTime" id="idTime" value="@idTime" />
    <input type="hidden" name="view" id="view" value="@((int)view)" />

    <div class="container">
        <h1>Time</h1>

        @PageHelper.MakeAlert()



        @if (view == View.New || view == View.Edit)
        {
            <div class="mb-3">
                <label for="nome" class="form-label">Nome: </label>
                <input class="form-control @isInvalid("nome")" type="text" name="nome" id="nome" value="@time.Nome" />
                @PageHelper.makeFeedback("nome")
            </div>
        }


        <div class="mb-3">
            <button class="btn btn-primary" type="submit" onclick="estadoInicial()">Limpar</button>


            @if (view == View.New)
            {
                @PageHelper.MakeBotao(botoes, "I")
            }

            @if (view == View.Edit)
            {
                @PageHelper.MakeBotao(botoes, "E")
                @PageHelper.MakeBotao(botoes, "A")

            }

            @if (view == View.Index)
            {
                if (botoes.Any(x => x.Codigo == "I"))
                {
                    <button class="btn btn-primary" type="button" onclick="novo()">Adicionar novo</button>
                }

            }



        </div>

        @if (view == View.Index)
        {
            if (times != null)
            {
                <table class="mt-2 table table-dark table-striped table-hover">
                    <thead>
                        <tr>
                            <th>IdTime</th>
                            <th>Nome</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Time item in times)
                        {
                            <tr>
                                <td>@item.IdTime</td>
                                <td>@item.Nome</td>
                                <td>
                                    @if (botoes.Any(x => x.Codigo == "A" || x.Codigo == "E"))
                                    {
                                        <button class="btn btn-warning" type="button" onclick="editar('@item.IdTime', '@item.Nome')">
                                            <i class="bi bi-pencil-fill"></i>
                                            Editar
                                        </button>
                                    }
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>

            }
        }


    </div>
</form>

<script src="~/Scripts/scripts.js"></script>

<script>

    function editar(idTime, nome) {
        document.form1.view.value = "@((int)View.Edit)"
        document.form1.idTime.value = idTime;
        executarAcao('C');
    }

    function novo() {
        document.form1.view.value = "@((int)View.New)";
        executarAcao('');
    }
</script>


