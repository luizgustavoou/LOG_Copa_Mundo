@RenderPage("~/AreaRestrita/Seguranca.cshtml");
@{
    Page.Title = "Jogo";
    Layout = "~/AreaRestrita/_Layout.cshtml";
}

@functions {
    string extensoesValidas = ".pdf";

    private enum View
    {
        Index,
        New,
        Edit
    }

    private class Jogo
    {
        public string IdJogo { get; set; }
        public string IdTime1 { get; set; }
        public string NomeTime1 { get; set; }
        public string IdTime2 { get; set; }
        public string NomeTime2 { get; set; }
        public int Placar1 { get; set; }
        public int Placar2 { get; set; }
        public string DataInicio { get; set; }
        public string DataFim { get; set; }
        public string CaminhoSumula { get; set; }

    }

    private class Time
    {
        public string IdTime { get; set; }
        public string Nome { get; set; }
    }


    string acao = null;
    string idJogo = null;

    string data = null;
    string hora = null;

    Jogo jogo = null;

    View view = View.Index;
    List<Jogo> jogos = null;
    List<Time> times = null;
    List<Botao> botoes = null;

    HttpPostedFileBase arquivo = null;
    string nomeArquivo = null;


    private void instanciarJogo()
    {
        if (jogo != null) return;

        jogo = new Jogo();
    }


    private void AlimentaVariaveis()
    {
        instanciarJogo();
        acao = Util.ChecaNulo(Request.Form["acao"]);
        idJogo = Util.ChecaNulo(Request.Form["idJogo"]);
        data = Util.ChecaNulo(Request.Form["data"]);
        hora = Util.ChecaNulo(Request.Form["hora"]);
        botoes = new BotaoDao().GetAll();

        if (!string.IsNullOrWhiteSpace(Request.Form["view"]))
        {
            view = (View)Enum.Parse(typeof(View), Request.Form["view"]);
        }

        nomeArquivo = Util.ChecaNulo(Request.Form["nomeArquivo"]);

        if (Request.Files.Count > 0)
        {
            arquivo = Request.Files["arquivo"];
        }
    }

    private void LimpaVariaveis()
    {
        acao = null;
        idJogo = null;
    }

    private void ConsultarJogos()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@IdJogo", idJogo);
        jogos = new Dao().ExecutarAcaoList<Jogo>("C", parametros);

    }

    private void ConsultarTimes()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@TipoConsulta", 1);
        times = new Dao().ExecutarAcaoList<Time>("C", parametros);
    }

    private string isInvalid(string key)
    {
        return (!ModelState.IsValidField(key) ? "is-invalid" : "");
    }

    private void CarregadarDados()
    {
        if (view == View.Edit && acao == "C" && jogos != null && jogos.Count == 1)
        {
            jogo = jogos.FirstOrDefault();
        }
    }

    private void Manutencao()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();

        parametros.Add("@IdJogo", Util.ChecaNulo(jogo.IdJogo));
        parametros.Add("@IdTime1", Util.ChecaNulo(jogo.IdTime1));
        parametros.Add("@IdTime2", Util.ChecaNulo(jogo.IdTime2));
        parametros.Add("@DataInicio", data + "T" + hora + ":00");

        if (acao == "A")
        {
            string nomeArquivoSalvado = SalvarArquivo();
            nomeArquivoSalvado = Path.Combine("/AreaRestrita/arquivos/", nomeArquivoSalvado);

            parametros.Add("@CaminhoSumula", nomeArquivoSalvado);
        }

        new Dao().ExecutarAcao(acao, parametros);
    }

    private void ExecutarManutencao()
    {

        jogo = new Jogo()
        {
            IdJogo = Util.ChecaNulo(Request.Form["IdJogo"]),
            IdTime1 = Util.ChecaNulo(Request.Form["idTime1"]),
            IdTime2 = Util.ChecaNulo(Request.Form["IdTime2"]),
            DataInicio = Util.ChecaNulo(Request.Form["data"] + "T" + hora)
        };

        Manutencao();
        view = View.Index;
        ModelState.AddError("alert-success", "Operação realizada com sucesso");
        LimpaVariaveis();
    }

    private string IsInvalid(string key)
    {
        return !ModelState.IsValidField(key) ? "is-invalid" : "";
    }

    private string SalvarArquivo()
    {
        if (arquivo == null)
        {
            throw new InvalidOperationException("Informe o arquivo");
        }

        if (string.IsNullOrWhiteSpace(arquivo.FileName))
        {
            throw new InvalidOperationException("Não foi possível identificar o nome do arquivo");
        }

        if (arquivo.ContentLength > 512 * 1000)
        {
            ModelState.AddError("arquivo", "Arquivo deve ter o tamanho de até 512KB");
        }

        if (!Directory.Exists(Server.MapPath("~/AreaRestrita/arquivos")))
        {
            Directory.CreateDirectory(Server.MapPath("~/AreaRestrita/arquivos"));
        }

        string novoNomeArquivo = Util.GenerateUniqueFileName(arquivo.FileName);

        string caminhoArquivo = Path.Combine(Server.MapPath("~/AreaRestrita/arquivos"), novoNomeArquivo);

        arquivo.SaveAs(caminhoArquivo);

        return novoNomeArquivo;
    }

    private void ExcluirArquivo()
    {
        if (nomeArquivo != null)
        {
            string caminhoArquivo = Server.MapPath(nomeArquivo);


            if (File.Exists(caminhoArquivo))
            {
                File.Delete(caminhoArquivo);
            }
        }
    }
}

@{
    AlimentaVariaveis();

    if (acao == "I" || acao == "A" || acao == "E")
    {
        Util.ExceptionHandler(() =>
        {
            ExecutarManutencao();
        }
        , this.ModelState);

    }

    if (acao == "ES")
    {
        Util.ExceptionHandler(() =>
        {
            ExcluirArquivo();
            ModelState.AddError("alert-success", "Súmula removida com sucesso");
        }
        , this.ModelState);
    }

    Util.ExceptionHandler(() =>
    {
        ConsultarTimes();
        ConsultarJogos();
        CarregadarDados();
    }, this.ModelState);
}


<form name="form1" id="form1" method="post" enctype="multipart/form-data">
    <input type="hidden" name="acao" id="acao" />
    <input type="hidden" name="idJogo" id="idJogo" value="@idJogo" />
    <input type="hidden" name="nomeArquivo" id="nomeArquivo" />

    <input type="hidden" name="view" id="view" value="@view" />

    <div class="container">
        <h1>Jogo</h1>

        @PageHelper.MakeAlert()

        @if (view == View.New || view == View.Edit)
        {
            <div class="text-white mb-3">
                <label for="idTime1">Time 1: </label>

                <select class="form-select @isInvalid("idTime1")" name="idTime1" id="idTime1">
                    <option value=""></option>
                    @foreach (Time item in times)
                    {
                        <option value="@item.IdTime" @(jogo.IdTime1 == item.IdTime ? "selected" : "")>@item.Nome</option>
                    }
                </select>
                @PageHelper.makeFeedback("idTime1")
            </div>

            <div class="mb-3">
                <label for="idTime2">Time 2: </label>

                <select class="form-select @isInvalid("idTime2")" name="idTime2" id="idTime2">
                    <option value=""></option>
                    @foreach (Time item in times)
                    {
                        <option value="@item.IdTime" @(jogo.IdTime2 == item.IdTime ? "selected" : "")>@item.Nome</option>
                    }
                </select>
                @PageHelper.makeFeedback("idTime2")
            </div>

            <div class="mb-3">
                <label for="dataInicio">Data inicial: </label>
                <input class="form-select @isInvalid("dataInicio")" type="hidden" name="dataInicio" id="dataInicio" />

                <div class="d-flex gap-3">
                    <input class="form-select @isInvalid("dataInicio")" type="date" name="data" id="data" value="@(jogo.DataInicio != null ? Util.FormatarData(@jogo.DataInicio, Util.TypeFormat.AMERICAN_DATE) : null)" />

                    <input class="form-select @isInvalid("dataInicio")" type="time" name="hora" id="hora" value="@(jogo.DataInicio != null ? Util.FormatarData(@jogo.DataInicio, Util.TypeFormat.TIME_DEFAULT) : null)" />

                </div>

                @PageHelper.makeFeedback("dataInicio")

            </div>

        }

        @if (view == View.Edit)
        {
            <div class="text-white mt-5">
                <div class="row">
                    <div class="col">
                        <label for="arquivo">Súmula: </label>
                        <input type="file" id="arquivo" name="arquivo" class="form-control @IsInvalid("arquivo")" onchange="checkFile(this)" />
                    </div>
                    <div class="mt-3">
                        <div class="small">Extensões válidas: @extensoesValidas</div>
                        <div class="small">Tamanho máximo do arquivo: 512kB</div>
                    </div>
                </div>

            </div>
        }

        <div class="mb-3">
            <button class="btn btn-primary" type="submit" onclick="estadoInicial()">Limpar</button>

            @if (view == View.New)
            {
                @PageHelper.MakeBotao(botoes, "I");

            }

            @if (view == View.Edit)
            {
                @PageHelper.MakeBotao(botoes, "E")
                @PageHelper.MakeBotao(botoes, "A")
            }

            @if (view == View.Index)
            {
                if (botoes.Any(x => x.Codigo == "I"))
                {
                    <button class="btn btn-success" type="button" onclick="novo()">Adicionar novo</button>
                }
            }
        </div>

        @if (view == View.Index)
        {
            if (jogos != null)
            {
                <table class="mt-2 table table-dark table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Time 1</th>
                            <th>Time 2</th>
                            <th>Placar 1</th>
                            <th>Placar 2</th>
                            <th>Início</th>
                            <th>Fim</th>
                            <th>Súmula</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Jogo item in jogos)
                        {
                            <tr>
                                <td>@item.NomeTime1</td>
                                <td>@item.NomeTime2</td>
                                <td>@item.Placar1</td>
                                <td>@item.Placar2</td>
                                <td>@Util.FormatarData(item.DataInicio, Util.TypeFormat.BRAZIL_DATETIME).ToString()</td>
                                <td>@item.DataFim</td>
                                <td>
                                    @if (item.CaminhoSumula == null)
                                    {
                                        <span>Sem súmula</span>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-success" onclick="verSumula('@item.CaminhoSumula')">
                                            <i class="bi bi-search"></i>
                                        </button>

                                        @*<button type="button" class="btn btn-danger" onclick="excluirArquivo('@item.CaminhoSumula')">
                                            <i class="bi bi-trash"></i>
                                        </button>*@
                                    }
                                </td>
                                <td>
                                    @if (botoes.Any(x => x.Codigo == "E" || x.Codigo == "E"))
                                    {
                                        <button class="btn btn-warning" type="button" onclick="editar('@item.IdJogo')" @(item.Placar1 > 0 || item.Placar2 > 0 ? "disabled" : "")>
                                            <i class="bi bi-pencil-fill"></i>
                                            Editar
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }


</form>

<script src="~/Scripts/scripts.js"></script>

<script>

    const form = document.getElementById("form1");

    function editar(idJogo) {
        form.view.value = "@((int)View.Edit)"
        form.idJogo.value = idJogo;
        executarAcao('C');
    }

    function novo() {
        form.view.value = "@((int)View.New)"
        executarAcao('');
    }

    function checkFile(input) {
        const extensoesValidas = "@extensoesValidas".toUpperCase().split(",");
        const extensaoArquivo = input.value.substring(input.value.lastIndexOf("."));

        if (extensoesValidas.indexOf(extensaoArquivo.toUpperCase()) < 0) {
            alert("Formato do arquivo inválido. Extensões aceitas: " + extensoesValidas);
            input.value = "";
            return false;
        }

        return true;
    }

     //function enviar() {
     //    var arquivo = document.form1.arquivo.value;

     //    if (!arquivo) {
     //        alert("Informe o arquivo");
     //        return;
     //    }

     //    document.form1.acao.value = "I";
     //    document.form1.submit();
     //}

     function excluirArquivo(nomeArquivo) {
         document.form1.acao.value = "ES";
         document.form1.nomeArquivo.value = nomeArquivo;
         document.form1.submit();
    }

    function verSumula(caminhoArquivo) {
        const urlDestiono = "/AreaRestrita/ConsultarSumula?caminhoArquivo=" + encodeURIComponent(caminhoArquivo)

        window.open(urlDestiono, "_blank");
    }
</script>



