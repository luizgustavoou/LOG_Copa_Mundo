@RenderPage("~/AreaRestrita/Seguranca.cshtml");
@{
    Page.Title = "Autorizacao";
    Layout = "~/AreaRestrita/_Layout.cshtml";
}

@functions {
    private class Autorizacao
    {
        public string NomeSistema { get; set; }
        public string NomeModulo { get; set; }
        public string NomePagina { get; set; }
        public int IdAcao { get; set; }
        public string NomeAcao { get; set; }
        public int Permissao { get; set; }
    }

    private class Operador
    {
        public string IdOperador { get; set; }
        public string Nome { get; set; }
    }


    string acao = null;
    string idOperador = null;
    string idsAcao = null;

    List<Autorizacao> autorizacoes = null;
    List<Operador> operadores = null;

    private void AlimentaVariaveis()
    {
        acao = Util.ChecaNulo(Request.Form["acao"]);
        idOperador = Util.ChecaNulo(Request.Form["idOperador"]);
        idsAcao = Util.ChecaNulo(Request.Form["idAcao"]);

    }

    private void ConsultarAutorizacoesOperador()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@TipoRetorno", 2);
        parametros.Add("@IdOperador", idOperador);


        string procedure = GetNomeProcedure("C");
        Dao dao = new Dao();

        autorizacoes = dao.ExecutarProcedureList<Autorizacao>(procedure, parametros);

    }

    private void ConsultarOperadores()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@TipoRetorno", 1);


        string procedure = GetNomeProcedure("C");
        Dao dao = new Dao();

        operadores = dao.ExecutarProcedureList<Operador>(procedure, parametros);
    }

    private string GetNomeProcedure(string acao)
    {
        switch (acao)
        {
            case "C": return "stp_LGU_Autorizacao_Sel";
            case "A": return "stp_LGU_Autorizacao_Upd";
            default:
                return null;
        }
    }

    private string isInvalid(string key)
    {
        return (!ModelState.IsValidField(key) ? "is-invalid" : "");
    }

    private void Manutencao()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@IdOperador", idOperador);
        parametros.Add("@IdsAcao", idsAcao);


        string procedure = GetNomeProcedure(acao);

        Dao dao = new Dao();

        dao.ExecutarProcedure(procedure, parametros);

    }

    private void executarManutencao()
    {
        Manutencao();
        ModelState.AddError("alert-success", "Operação realizada com sucesso.");
    }
}

@{
    AlimentaVariaveis();

    if (acao == "A")
    {
        Util.ExceptionHandler(executarManutencao, this.ModelState);

    }

    Util.ExceptionHandler(() =>
    {
        ConsultarOperadores();
        ConsultarAutorizacoesOperador();

    }, this.ModelState);
}


<body>
    <form class="text-light" id="form1" name="form1" method="post">
        <input type="hidden" name="acao" id="acao" />
        <input type="hidden" name="idOperador" id="idOperador" value="@idOperador" />


        <div class="container">
            <h1>Autorizações</h1>

            @PageHelper.MakeAlert()

            <div class="mb-3">
                <label for="idOperadorSelecionado">Operador: </label>

                <select id="idOperadorSelecionado" class="form-select @isInvalid("idOperadorSelecionado")" name="idOperadorSelecionado">
                    <option value=""></option>
                    @foreach (Operador item in operadores)
                    {
                        <option value="@item.IdOperador" @(item.IdOperador == idOperador ? "selected" : "")>@item.Nome</option>
                    }


                </select>
                @*@PageHelper.makeFeedback("idOperadorSelecionado")*@

            </div>

            @if (autorizacoes != null)
            {
                <table class="mt-2 table table-dark table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Sistema</th>
                            <th>Módulo</th>
                            <th>Página</th>
                            <th>Ação</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Autorizacao item in autorizacoes)
                        {
                            <tr>
                                <td>@item.NomeSistema</td>
                                <td>@item.NomeModulo</td>
                                <td>@item.NomePagina</td>
                                <td>@item.NomeAcao</td>
                                <td>
                                    <input class="form-check-input" type="checkbox" name="idAcao" id="idAcao" value="@item.IdAcao" @(item.Permissao == 1 ? "checked" : "")>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>

                <button class="btn btn-primary" onclick="executarAcao('A')">Registar</button>

            }
        </div>
    </form>

    <script src="~/Scripts/scripts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>


    <script>
        const form1 = document.getElementById("form1");

        const selectJogoSelecionado = document.getElementById("idOperadorSelecionado");

        function handleJogoSelecionado() {
            form1.idOperador.value = selectJogoSelecionado.value;
            form1.submit();
        }

        selectJogoSelecionado.addEventListener("change", handleJogoSelecionado)

        function editar(idAutorizacao) {
            form1.idAutorizacao.value = idAutorizacao;
            executarAcao('C');
        }

        function novo() {
            executarAcao('');
        }


    </script>
</body>


