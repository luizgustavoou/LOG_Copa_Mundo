@RenderPage("~/AreaRestrita/Seguranca.cshtml");
@{
    Page.Title = "Modulo";
    Layout = "~/AreaRestrita/_Layout.cshtml";
}

@functions {
    private enum View
    {
        Index,
        New,
        Edit
    }

    private class Modulo
    {
        public string IdModulo { get; set; }
        public string IdSistema { get; set; }
        public string Sistema { get; set; }
        public string Codigo { get; set; }
        public string Caption { get; set; }
    }

    private class Sistema
    {
        public string IdSistema { get; set; }
        public string Codigo { get; set; }
        public string Caption { get; set; }
    }


    string acao = null;

    string idModulo = null;

    Modulo modulo = null;


    View view = View.Index;
    List<Modulo> modulos = null;
    List<Sistema> sistemas = null;
    List<Botao> botoes = null;

    private void AlimentaVariaveis()
    {
        modulo = new Modulo();

        acao = Util.ChecaNulo(Request.Form["acao"]);
        idModulo = Util.ChecaNulo(Request.Form["idModulo"]);
        botoes = new BotaoDao().GetAll();

        if (!string.IsNullOrWhiteSpace(Request.Form["view"]))
        {
            view = (View)Enum.Parse(typeof(View), Request.Form["view"]);
        }
    }

    private void LimpaVariaveis()
    {
        acao = null;
        idModulo = null;
        modulo = null;
    }

    private void ConsultarModulos()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@IdModulo", idModulo);
        modulos = new Dao().ExecutarAcaoList<Modulo>("C", parametros);

    }

    private void ConsultarSistemas()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@TipoRetorno", 1);
        sistemas = new Dao().ExecutarAcaoList<Sistema>("C", parametros);
    }

    private string isInvalid(string key)
    {
        return (!ModelState.IsValidField(key) ? "is-invalid" : "");
    }

    private void Manutencao()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@IdModulo", modulo.IdModulo);
        parametros.Add("@IdSistema", modulo.IdSistema);
        parametros.Add("@Codigo", modulo.Codigo);
        parametros.Add("@Caption", modulo.Caption);

        new Dao().ExecutarAcao(acao, parametros);

    }

    private void instanciarModulo()
    {
        if (modulo == null)
        {
            modulo = new Modulo();
        }
    }

    private void carregarDados()
    {
        if (view == View.Edit && acao == "C" && modulos != null && modulos.Count == 1)
        {
            modulo = modulos.FirstOrDefault();
        }
    }

    private void executarManutencao()
    {
        modulo = new Modulo()
        {
            IdModulo = Util.ChecaNulo(Request.Form["idModulo"]),
            IdSistema = Util.ChecaNulo(Request.Form["idSistema"]),
            Codigo = Util.ChecaNulo(Request.Form["codigo"]),
            Caption = Util.ChecaNulo(Request.Form["caption"])
        };

        Manutencao();
        view = View.Index;
        LimpaVariaveis();
        ModelState.AddError("alert-success", "Operação realizada com sucesso.");
    }
}

@{
    AlimentaVariaveis();

    if (acao == "I" || acao == "A" || acao == "E")
    {
        Util.ExceptionHandler(executarManutencao, this.ModelState);

    }

    Util.ExceptionHandler(() =>
    {
        ConsultarSistemas();
        ConsultarModulos();
        carregarDados();

    }, this.ModelState);


}


<form class="text-light" name="form1" method="post">
    <input type="hidden" name="acao" id="acao" />
    <input type="hidden" name="idModulo" id="idModulo" value="@idModulo" />
    <input type="hidden" name="view" id="view" value="@((int)view)" />

    <div class="container">
        <h1>Modulo</h1>

        @PageHelper.MakeAlert()



        @if (view == View.New || view == View.Edit)
        {
            <div class="mb-3">
                <label for="idSistema">Sistema: </label>

                <select class="form-select @isInvalid("idSistema")" name="idSistema" id="idSistema">
                    <option value=""></option>
                    @foreach (Sistema item in sistemas)
                    {
                        <option value="@item.IdSistema" @(item.IdSistema == modulo.IdSistema ? "selected" : "")>@item.Caption</option>
                    }


                </select>
                @PageHelper.makeFeedback("idSistema")

            </div>

            <div class="mb-3">
                <label for="codigo" class="form-label">Código: </label>
                <input class="form-control @isInvalid("codigo")" type="text" name="codigo" id="codigo" value="@modulo.Codigo" />
                @PageHelper.makeFeedback("codigo")
            </div>

            <div class="mb-3">
                <label for="caption" class="form-label">Caption: </label>
                <input class="form-control @isInvalid("caption")" type="text" name="caption" id="caption" value="@modulo.Caption" />
                @PageHelper.makeFeedback("caption")
            </div>
        }


        <div class="mb-3">
            <button class="btn btn-primary" type="submit" onclick="estadoInicial()">Limpar</button>

            @if (view == View.New)
            {
                @PageHelper.MakeBotao(botoes, "I");
            }

            @if (view == View.Edit)
            {
                @PageHelper.MakeBotao(botoes, "E");
                @PageHelper.MakeBotao(botoes, "A");
            }

            @if (view == View.Index)
            {
                if (botoes.Any(x => x.Codigo == "I"))
                {
                    <button class="btn btn-primary" type="button" onclick="novo()">Novo</button>
                }

            }
        </div>

        @if (view == View.Index)
        {
            if (modulos != null)
            {
                <table class="mt-2 table table-dark table-striped table-hover">
                    <thead>
                        <tr>
                            <th>IdModulo</th>
                            <th>Sistema</th>
                            <th>Código</th>
                            <th>Caption</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Modulo item in modulos)
                        {
                            <tr>
                                <td>@item.IdModulo</td>
                                <td>@item.Sistema</td>
                                <td>@item.Codigo</td>
                                <td>@item.Caption</td>
                                <td>
                                    @if (botoes.Any(x => x.Codigo == "A" || x.Codigo == "E"))
                                    {
                                        <button class="btn btn-warning" type="button" onclick="editar('@item.IdModulo')">
                                            <i class="bi bi-pencil-fill"></i>
                                            Editar
                                        </button>
                                    }
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>

            }
        }


    </div>
</form>

<script src="~/Scripts/scripts.js"></script>

<script>
        function editar(idModulo) {
            document.form1.view.value = "@((int)View.Edit)"
            document.form1.idModulo.value = idModulo;
            executarAcao('C');
        }

        function novo() {
            document.form1.view.value = "@((int)View.New)";
            executarAcao('');
        }
</script>


