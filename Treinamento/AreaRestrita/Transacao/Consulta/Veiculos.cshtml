@RenderPage("~/AreaRestrita/Seguranca.cshtml");

@{
    Page.Title = "Time";
    Layout = "~/AreaRestrita/_Layout.cshtml";
}

@functions {
    private class Veiculo
    {
        public string MensagemEnvio { get; set; }
        public string MensagemRetorno { get; set; }
        public string inParteFixa { get; set; }
        public string inPlaca { get; set; }
        public string outParteFixa { get; set; }
        public string outCodigoRetorno { get; set; }
        public string outMensagemErro { get; set; }
        public string outCodigoIdentificacaoVeiculo { get; set; }
        public string outPlaca { get; set; }
        public string outRenavam { get; set; }
        public string outNomeSituacaoVeiculo { get; set; }
        public string outCodigoMunicipioEmplacamento { get; set; }
        public string outCodigoCor { get; set; }
        public string outAnoModelo { get; set; }
        public string outAnoFabricacao { get; set; }
        public string outPotenciaVeiculo { get; set; }
        public string outCilindradas { get; set; }
        public string outCodigoCombustivel { get; set; }
        public string outCapacidadePassageiros { get; set; }
    }

    string placa = null;
    string acao = null;
    string idTime = null;
    List<Botao> botoes = null;

    Veiculo veiculo = null;


    private void AlimentaVariaveis()
    {
        acao = Util.ChecaNulo(Request.Form["acao"]);
        placa = Util.ChecaNulo(Request.Form["placa"]);
        idTime = Util.ChecaNulo(Request.Form["idTime"]);
        botoes = new BotaoDao().GetAll();
    }

    private void LimpaVariaveis()
    {
        acao = null;
        idTime = null;
        veiculo = null;
    }

    private void Consultar()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@Placa", placa);

        veiculo = new Dao().ExecutarAcaoList<Veiculo>("C", parametros).FirstOrDefault();

    }

    private string isInvalid(string key)
    {
        return (!ModelState.IsValidField(key) ? "is-invalid" : "");
    }
}

@{
    AlimentaVariaveis();

    Util.ExceptionHandler(() =>
    {
        Consultar();

    }, this.ModelState);
}



<form name="form1" method="post">
    <input type="hidden" name="acao" id="acao" />
    <input type="hidden" name="idTime" id="idTime" value="@idTime" />

    <div class="container">
        <h1>Veículos</h1>

        @PageHelper.MakeAlert()




        <div class="mb-3">
            <label for="placa" class="form-label">Nome: </label>
            <input class="form-control @isInvalid("placa")" type="text" name="placa" id="placa" value="@placa" />
            @PageHelper.makeFeedback("placa")
        </div>



        <div class="mb-3">
            <button class="btn btn-outline-secondary" type="submit" onclick="estadoInicial()">Limpar</button>

            <button class="btn btn-primary" type="submit" onclick="executarAcao('C')">Buscar</button>




        </div>
        @if (veiculo != null)
        {
            string unidade = "";
            int countUnidade = 0;

            string dezenas = "";
            int countDezena = 0;

            string centenas = "";
            int countCentena = 0;


            <article class="border mb-2">
                <header class="px-2  bg-secondary-subtle">
                    <p class="text-secondary-emphasis">MENSAGEM ENVIO</p>
                </header>
                <section class="d-flex flex-column px-2 py-2">
                    <PRE>@veiculo.MensagemEnvio</PRE>
                </section>


            </article>

            <article class="overflow-auto border mb-2">
                <header class="px-2 bg-secondary-subtle">
                    <p class="text-secondary-emphasis">MENSAGEM RETORNO</p>
                </header>

                <section class="px-2 d-flex flex-column">

                    @for (int ii = 0; ii < veiculo.MensagemRetorno.Length; ii++)
                    {
                        if (countCentena != 0 && countCentena % 100 == 0)
                        {
                            centenas += (countCentena / 100) % 100;
                        }
                        else
                        {
                            centenas += " ";
                        }

                        countCentena++;

                    }
                    <PRE>@centenas</PRE>

                    @for (int ii = 0; ii < veiculo.MensagemRetorno.Length; ii++)
                    {
                        if (countDezena != 0 && countDezena % 10 == 0)
                        {
                            dezenas += (countDezena / 10) % 10;
                        }
                        else
                        {
                            dezenas += " ";
                        }

                        countDezena++;

                    }
                    <PRE>@dezenas</PRE>

                    @for (int ii = 0; ii < veiculo.MensagemRetorno.Length; ii++)
                    {
                        unidade += countUnidade;
                        countUnidade++;

                        if (countUnidade == 10)
                        {
                            countUnidade = 0;
                        }
                    }

                    <PRE>@unidade</PRE>


                </section>

    

           

            </article>



            if (veiculo.outMensagemErro != null)
            {
                <div class="alert alert-warning">
                    @veiculo.outMensagemErro
                </div>
            }
            else
            {

                <table class="mt-2 table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Placa</th>
                            <th>Renavam</th>
                            <th>Situação veículo</th>
                            <th>Múnicipio do emplacamento</th>
                            <th>Código cor</th>
                            <th>Ano do modelo</th>
                            <th>Ano de fabricação</th>
                            <th>Potência</th>
                            <th>Cilindradas</th>
                            <th>Código combustível</th>
                            <th>Capacidade de passagaieros</th>
                        </tr>
                    </thead>
                    <tbody>

                        <tr>
                            <td>@veiculo.outPlaca</td>
                            <td>@veiculo.outRenavam</td>
                            <td>@veiculo.outNomeSituacaoVeiculo</td>
                            <td>@veiculo.outCodigoMunicipioEmplacamento</td>
                            <td>@veiculo.outCodigoCor</td>
                            <td>@veiculo.outAnoModelo</td>
                            <td>@veiculo.outAnoFabricacao</td>
                            <td>@veiculo.outPotenciaVeiculo</td>
                            <td>@veiculo.outCilindradas</td>
                            <td>@veiculo.outCodigoCombustivel</td>
                            <td>@veiculo.outCapacidadePassageiros</td>
                        </tr>


                    </tbody>
                </table>
            }
        }



    </div>
</form>

<style>
    .pai {
        width: 300px; /* ou qualquer outra largura desejada */
        overflow-x: auto;
        white-space: nowrap; /* Para garantir que os filhos não quebrem linha */
        border: 1px solid black; /* Apenas para visualização */
    }

    .filho1, .filho2 {
        display: inline-block;
        width: 100%;
        height: 100px; /* Ajuste conforme necessário */
        border: 1px solid red; /* Apenas para visualização */
        box-sizing: border-box;
    }

    pre {
        overflow: visible;
        margin-bottom: 0;
    }
</style>
<script src="~/Scripts/scripts.js"></script>

<script>
</script>


