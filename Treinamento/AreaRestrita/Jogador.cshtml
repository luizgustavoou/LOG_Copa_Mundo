@{
    Page.Title = "Jogador";
    Layout = "~/AreaRestrita/_Layout.cshtml";
}

@using System.Data.SqlClient

@functions {
    //private enum Acao
    //    {
    //        INCLUIR,
    //        CONSULTAR,
    //        EDITAR,
    //        EXCLUIR
    //    }

    private enum View
    {
        Index,
        New,
        Edit
    }

    private class Jogador
    {
        public string IdJogador { get; set; }
        public string Nome { get; set; }
        public string IdTime { get; set; }
        public string NomeTime { get; set; }

    }

    private class Time
    {
        public string IdTime { get; set; }
        public string Nome { get; set; }
    }


    string acao = null;
    string idJogador = null;
    View view = View.Index;

    Jogador jogador = null;

    List<Jogador> jogadores = null;
    List<Time> times = null;


    private void instanciarJogador()
    {
        if (jogador != null) return;

        jogador = new Jogador();
    }

    private void AlimentaVariaveis()
    {
        acao = Util.ChecaNulo(Request.Form["acao"]);
        idJogador = Util.ChecaNulo(Request.Form["idJogador"]);

        if (!string.IsNullOrWhiteSpace(Request.Form["view"]))
        {
            view = (View)Enum.Parse(typeof(View), Request.Form["view"]);
        }
    }

    private void LimpaVariaveis()
    {
        acao = null;
        idJogador = null;
    }

    private void ConsultarJogadores()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@IdJogador", idJogador);

        string procedure = GetNomeProcedure("C");
        Dao dao = new Dao();

        jogadores = dao.ExecutarProcedureList<Jogador>(procedure, parametros);

    }

    private void ConsultarTimes()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();

        parametros.Add("@TipoConsulta", 1);

        string procedure = GetNomeProcedure("C");

        Dao dao = new Dao();

        times = dao.ExecutarProcedureList<Time>(procedure, parametros);
    }

    private string GetNomeProcedure(string acao)
    {
        switch (acao)
        {
            case "C": return "stp_LGU_Jogador_Sel";
            case "I": return "stp_LGU_Jogador_Ins";
            case "A": return "stp_LGU_Jogador_Upd";
            case "E": return "stp_LGU_Jogador_Del";

            default:
                return null;
        }
    }

    private string isInvalid(string key)
    {
        return (!ModelState.IsValidField(key) ? "is-invalid" : "");
    }

    private void Manutencao()
    {
        Dictionary<string, object> parametros = new Dictionary<string, object>();

        parametros.Add("@IdJogador", jogador.IdJogador);
        parametros.Add("@Nome", jogador.Nome);
        parametros.Add("@IdTime", jogador.IdTime);

        string procedure = GetNomeProcedure(acao);

        Dao dao = new Dao();

        dao.ExecutarProcedure(procedure, parametros);
    }

    private void ExecutarManutencao()
    {
        instanciarJogador();

        jogador.IdJogador = Request.Form["IdJogador"];
        jogador.Nome = Request.Form["Nome"];
        jogador.IdTime = Request.Form["IdTime"];
        jogador.NomeTime = Request.Form["NomeTime"];


        Manutencao();
        view = View.Index;
        LimpaVariaveis();
        ModelState.AddError("alert-success", "Operação realizada com sucesso.");

    }

    private void CarregarDados()
    {
        if (view == View.Edit && acao == "C" && jogadores != null && jogadores.Count == 1)
        {
            jogador = jogadores.FirstOrDefault();
        }
    }
}

@{
    AlimentaVariaveis();

    if(acao == "I" || acao == "A" || acao == "E")
    {
        Util.ExceptionHandler(ExecutarManutencao, this.ModelState);

    }

    Util.ExceptionHandler(() =>
    {
        ConsultarTimes();
        ConsultarJogadores();
        CarregarDados();
    }, this.ModelState);

}

@section head {

}

<body>
    <form name="form1" method="post">
        <input type="hidden" name="acao" id="acao" />
        <input type="hidden" name="idJogador" id="idJogador" value="@idJogador" />
        <input type="hidden" name="view" id="view" value="@view" />

        <div class="container">
            <h1>Jogador</h1>


            @PageHelper.MakeAlert()


            @if (view == View.New || view == View.Edit)
            {
                <div class="mb-3">
                    <label for="nome" class="form-label">Nome: </label>
                    <input class="form-control @isInvalid("nome")" type="text" name="nome" id="nome" value="@jogador.Nome" />
                    @PageHelper.makeFeedback("nome")
                </div>

                <div class="mb-3">
                    <label for="idTime">Time: </label>

                    <select class="form-select @isInvalid("idTime")" name="idTime" id="idTime">
                        <option value=""></option>
                        @foreach (Time item in times)
                        {
                            <option value="@item.IdTime" @(jogador.IdTime == item.IdTime ? "selected" : "")>@item.Nome</option>
                        }


                    </select>
                    @PageHelper.makeFeedback("idTime")

                </div>

            }

            


            <div class="mb-3">
                <button class="btn btn-primary" type="submit" onclick="estadoInicial()">Limpar</button>

                @if (view == View.Index)
                {
                    <button class="btn btn-primary" type="button" onclick="novo()">Novo</button>

                }

                @if (view == View.New)
                {
                    <button class="btn btn-success" type="button" onclick="executarAcao('I')">Incluir</button>
                }

                @if (view == View.Edit)
                {
                    <button class="btn btn-danger" type="button" onclick="executarAcao('E')">Excluir</button>
                    <button class="btn btn-warning" type="button" onclick="executarAcao('A')">Alterar</button>
                }
            </div>

            @if (jogadores != null)
            {
                if (view == View.Index)
                {
                    <table class="mt-3 table table-dark table-striped table-hover">
                        <thead>
                            <tr>
                                <th>IdJogador</th>
                                <th>Nome</th>
                                <th>Time</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Jogador item in jogadores)
                            {
                                <tr>
                                    <td>@item.IdJogador</td>
                                    <td>@item.Nome</td>
                                    <td>@item.NomeTime</td>
                                    <td>
                                        <button class="btn btn-warning" type="button" onclick="editar('@item.IdJogador', '@item.Nome', '@item.IdTime')">
                                            Editar
                                            <i class="bi bi-pencil-fill"></i>
                                        </button>
                                    </td>
                                </tr>

                            }
                        </tbody>
                    </table>
                }
            }
        </div>
    </form>

    <script src="~/Scripts/scripts.js">
    </script>

    <script>
        function editar(idJogador, nome, idTime) {
            document.form1.idJogador.value = idJogador;
            document.form1.view.value = "@((int)View.Edit)"
            executarAcao('C');
        }

        function novo() {
            document.form1.view.value = "@((int)View.New)";
            executarAcao('');
        }
    </script>
</body>


